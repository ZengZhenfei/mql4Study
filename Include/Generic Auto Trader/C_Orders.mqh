//+------------------------------------------------------------------+
//|                                                     C_Orders.mqh |
//|                                                      Daniel Jose |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Daniel Jose"
//+------------------------------------------------------------------+
class C_Orders
{
	private	:
//+------------------------------------------------------------------+
		MqlTradeRequest	m_TradeRequest;
		struct st00
		{
			int		nDigits;
			double	VolMinimal,
						VolStep,
						PointPerTick,
						ValuePerPoint,
						AdjustToTrade;
			bool		PlotLast;
		}m_Infos;
//+------------------------------------------------------------------+
		ulong ToServer(void)
			{
				MqlTradeCheckResult 	TradeCheck;
				MqlTradeResult    	TradeResult;
				bool bTmp;
				
				ResetLastError();
				ZeroMemory(TradeCheck);
				ZeroMemory(TradeResult);
				bTmp = OrderCheck(m_TradeRequest, TradeCheck);
				if (_LastError == ERR_SUCCESS) bTmp = OrderSend(m_TradeRequest, TradeResult);
				if (_LastError != ERR_SUCCESS) MessageBox(StringFormat("Error Number: %d", GetLastError()), "Order System", MB_OK);
         	
				return (_LastError == ERR_SUCCESS ? TradeResult.order : 0);
			}
//+------------------------------------------------------------------+
inline double AdjustPrice(const double value)
			{
				return MathRound(value / m_Infos.PointPerTick) * m_Infos.PointPerTick;
			}
//+------------------------------------------------------------------+
inline double FinanceToPoints(const double Finance, const uint Leverage)
			{
				double volume = m_Infos.VolMinimal + (m_Infos.VolStep * (Leverage - 1));
				
				return AdjustPrice(MathAbs(((Finance / volume) / m_Infos.AdjustToTrade)));
			};
//+------------------------------------------------------------------+
	public	:
//+------------------------------------------------------------------+
		C_Orders()
			{
				m_Infos.nDigits 			= (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
				m_Infos.VolMinimal 		= SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
				m_Infos.VolStep	 		= SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
				m_Infos.PointPerTick		= SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
				m_Infos.ValuePerPoint	= SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
				m_Infos.AdjustToTrade 	= m_Infos.ValuePerPoint / m_Infos.PointPerTick;
				m_Infos.PlotLast			= (SymbolInfoInteger(_Symbol, SYMBOL_CHART_MODE) == SYMBOL_CHART_MODE_LAST);
			};
//+------------------------------------------------------------------+	
		~C_Orders() { }
//+------------------------------------------------------------------+
		ulong CreateOrder(const ENUM_ORDER_TYPE type, double Price, const double FinanceStop, const double FinanceTake, const uint Leverage, const bool IsDayTrade)
			{
					double 	bid, ask, Desloc;				
				
					Price = AdjustPrice(Price);
					bid = SymbolInfoDouble(_Symbol, (m_Infos.PlotLast ? SYMBOL_LAST : SYMBOL_BID));
					ask = (m_Infos.PlotLast ? bid : SymbolInfoDouble(_Symbol, SYMBOL_ASK));
					ZeroMemory(m_TradeRequest);
					m_TradeRequest.action			= TRADE_ACTION_PENDING;
					m_TradeRequest.symbol			= _Symbol;
					m_TradeRequest.volume			= NormalizeDouble(m_Infos.VolMinimal + (m_Infos.VolStep * (Leverage - 1)), m_Infos.nDigits);
					m_TradeRequest.type				= (type == ORDER_TYPE_BUY ? (ask >= Price ? ORDER_TYPE_BUY_LIMIT : ORDER_TYPE_BUY_STOP) : 
																							 	 (bid < Price ? ORDER_TYPE_SELL_LIMIT : ORDER_TYPE_SELL_STOP));
					m_TradeRequest.price				= NormalizeDouble(Price, m_Infos.nDigits);
					Desloc = FinanceToPoints(FinanceStop, Leverage);
					m_TradeRequest.sl					= NormalizeDouble(Desloc == 0 ? 0 : Price + (Desloc * (type == ORDER_TYPE_BUY ? -1 : 1)), m_Infos.nDigits);
					Desloc = FinanceToPoints(FinanceTake, Leverage);
					m_TradeRequest.tp					= NormalizeDouble(Desloc == 0 ? 0 : Price + (Desloc * (type == ORDER_TYPE_BUY ? 1 : -1)), m_Infos.nDigits);
					m_TradeRequest.type_time		= (IsDayTrade ? ORDER_TIME_DAY : ORDER_TIME_GTC);
					m_TradeRequest.type_filling	= ORDER_FILLING_RETURN;
					m_TradeRequest.deviation		= 1000;
					m_TradeRequest.comment			= "Order Generated by Experts Advisor.";
				
					return (((type == ORDER_TYPE_BUY) || (type == ORDER_TYPE_SELL)) ? ToServer() : 0);
		};
//+------------------------------------------------------------------+	
};
//+------------------------------------------------------------------+
